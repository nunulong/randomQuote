{"version":3,"sources":["global.style.js","components/Quotes/Quote.style.js","components/Quotes/Quotes.js","App.js","registerServiceWorker.js","index.js"],"names":["injectGlobal","Wrapper","styled","div","color","css","H1","h1","Div","Button","button","FlexWrapper","Quotes","props","fetchColor","randomColor","replace","Math","random","toString","setState","fetchQuote","$","ajax","url","jsonp","dataType","data","method","lang","format","done","response","quote","fail","jqxhr","textStatus","err","console","log","handleClick","handleTweet","window","open","state","quoteText","quoteAuthor","this","document","body","setAttribute","style1","icon","faQuoteLeft","faQuoteRight","onClick","href","faGithub","size","style","Object","assign","margin","Component","App","className","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","getElementById","URL","process","origin","addEventListener","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.04e33786.chunk.js","sourcesContent":["import { injectGlobal } from 'styled-components';\n\ninjectGlobal`\n  @import url('https://fonts.googleapis.com/css?family=Raleway');\n\n  body {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: 'Raleway', sans-serif;\n  }\n`;","import styled, { css } from 'styled-components';\n\nexport const Wrapper = styled.div`\n  transition: all 2s ease;\n  ${({ color }) => color && css`\n    color: ${color}\n  `};\n`\n\nexport const H1 = styled.h1`\n  margin-top: 5vw;\n  font-size: 7vw;\n  color: white;\n`\n\nexport const Div = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  width: 80vw;\n  height: 60vh;\n  margin-right: auto;\n  margin-left: auto;\n  margin-top: 5vh;\n  background: white;\n  z-index: 1;\n  box-shadow: -5px 5px 5px rgba(68, 68, 68, 0.6);\n\n  p {\n    font-size: 2.5vw;\n    text-align: justify;\n    padding-left: 3vw;\n    padding-right: 3vw;\n    font-weight: bolder;\n  }\n\n  h3 {\n    text-align: right;\n    padding-right: 5vw;\n    font-size: 1.5vw;\n  }\n`\n\nexport const Button = styled.button`\n  ${({ color }) => color && css`\n    background: ${color};\n  `}; \n  color: black;\n  font-size: 1.25vw;\n  display: inlin-block;\n  border-radius: 5px;\n  padding: 0.75vh 0;\n  margin: 0.75vh 0;\n  width: 10vw;\n  &:hover {\n    cursor: pointer;\n  }\n`\n\nexport const FlexWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n`","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport { Div, H1, Button, FlexWrapper, Wrapper } from './Quote.style';\nimport FontAwesomeIcon from '@fortawesome/react-fontawesome';\nimport { faQuoteLeft, faQuoteRight } from '@fortawesome/fontawesome-free-solid';\nimport { faGithub } from '@fortawesome/fontawesome-free-brands';\n\nclass Quotes extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quote: [],\n      color: ''\n    };\n  }\n\n  componentDidMount() {\n    this.fetchColor();\n    this.fetchQuote();\n  }\n\n  fetchColor = () => {\n    const randomColor = '#000000'.replace(/0/g, () => {\n      return (~~(Math.random() * 16)).toString(16);\n    });\n    this.setState({ color: randomColor });\n  };\n\n  fetchQuote = () => {\n    $.ajax({\n      url: 'https://api.forismatic.com/api/1.0/',\n      jsonp: 'jsonp',\n      dataType: 'jsonp',\n      data: {\n        method: 'getQuote',\n        lang: 'en',\n        format: 'jsonp'\n      }\n    })\n      .done(response => {\n        this.setState({\n          quote: response\n        });\n      })\n      .fail((jqxhr, textStatus, err) => {\n        console.log(`Request Failed: ${textStatus}, ${err}`);\n      });\n  };\n\n  handleClick = () => {\n    this.fetchQuote();\n    this.fetchColor();\n  };\n\n  handleTweet = () => {\n    window.open(\n      `https://twitter.com/intent/tweet?hashtags=Quote&text=\"${\n        this.state.quote.quoteText\n      }\" ${this.state.quote.quoteAuthor}`\n    );\n  };\n\n  render() {\n    document.body.setAttribute(\n      'style',\n      `background: ${this.state.color}; transition: background 2s ease;`\n    );\n\n    const style1 = this.state.color;\n    const style2 = { margin: '2rem' };\n\n    return (\n      <Wrapper color={this.state.color}>\n        <H1>Random Quote</H1>\n        <Div>\n          <div>\n            <p>\n              <FontAwesomeIcon icon={faQuoteLeft} />{' '}\n              {this.state.quote.quoteText}{' '}\n              <FontAwesomeIcon icon={faQuoteRight} />\n            </p>\n            <h3>{this.state.quote.quoteAuthor}</h3>\n          </div>\n          <FlexWrapper>\n            <Button color={this.state.color} onClick={this.handleClick}>\n              Quote Me\n            </Button>\n            <Button color={this.state.color} onClick={this.handleTweet}>\n              Tweet Me\n            </Button>\n          </FlexWrapper>\n        </Div>\n        <a href=\"https://github.com/nunulong/randomQuote\">\n          <FontAwesomeIcon\n            icon={faGithub}\n            size=\"3x\"\n            style={Object.assign({}, {color: style1}, style2)}\n          />\n        </a>\n      </Wrapper>\n    );\n  }\n}\n\nexport default Quotes;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Quotes from './components/Quotes/Quotes';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Quotes />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './global.style';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}